Web Development

Day 1: 16 December 2024
Introduction to Web Development.
Types of applications 
1 Desktop
2 Web
3 Mobile

Front end:
HTML (Structure)
CSS (Looks)
JAVA Script (Behavior)
Angular
React
Bootstrap

Backend (Server)
Language & Database
Java
C#
Python
Php

HTML
Note: It is common practice that All the visible data should go into body only and No visible data should be entered into the head tag.
•	The <!DOCTYPE html> declaration defines that this document is an HTML5 document
•	The <html> element is the root element of an HTML page
•	The <head> element contains meta information about the HTML page
•	The <title> element specifies a title for the HTML page (which is shown in the browser's title bar or in the page's tab)
•	The <body> element defines the document's body, and is a container for all the visible contents, such as headings, paragraphs, images, hyperlinks, tables, lists, etc.

Tags
An HTML element is defined by a start tag, some content, and an end tag:
Syntax
Pair tags
<tagname> Content </tagname>
Requires open and close 

<tagname>
Standalone and does not require close
1.	Heading element/tag/content/: h1-h6   <h1>……</h1>
2.	Paragraph <p>……</p>
3.	<br> line break </br>
4.	<hr> Horizontal Line </hr>
Example 1:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tags</title>
</head>
<body>
    <h1>WELCOME</h1>
    <h2>WELCOME</h2>
    <h3>WELCOME</h3>
    <h4>WELCOME</h4>
    <h5>WELCOME</h5>
    <h6>WELCOME</h6>

    <hr>
    <p>
        WELCOME TO MUMBAI. <br>Have A Great Day
    </p>
    <hr>
    <p>
        WELCOME TO MUMBAI. Have A Great Day
    </p>
</body>
</html>
==================================================================================
Text Formatting Elements

1.	<b> - Bold text
2.	<i> - Italic text
3.	<u> underlined text
4.	<small>small text
5.	<sub> - Subscript text
6.	<sup> - Superscript text
7.	<strong> - Important text
8.	<em> - Emphasized text
9.	<ins> inserted text (___)
10.	<del>deleted text (“hi” will be shown as crossed out)
EX:
<html>
<head>
    <title>Formating</title> 
    <!--  -->
    <meta charset="UTF-8">
  <meta name="description" content="Free Web tutorials">
  <meta name="keywords" content="HTML, CSS, JavaScript">
  <meta name="author" content="John Doe">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
   
     <h3> Text Formating </h3>
     
   
            <p> <b>HTML is the standard markup language for Web pages.</b> </p>
            <p> <i>HTML is the standard markup language for Web pages.</i> </p>
            <p> <u>HTML is the standard markup language for Web pages.</u> </p>
            <hr>
            <p> HTML is the <small>standard markup language</small> for Web pages.</p>
            <p> HTML is the <ins>standard markup language</ins> for Web pages.</p>
            <p> HTML is the <del>standard markup language</del> for Web pages.</p>
            <p> X<sup>2</sup></p>
            <br>
            <p>X<sub>2</sub></p>
            <p><strong>HTML is the standard markup language for Web pages.</strong> </p>
            <p><em>HTML is the standard markup language for Web pages.</em></p> 
          
            
</body>
</html>

==================================================================================
Day 2: 18/12/24
HTML Links:
HTML Links - Hyperlinks
HTML links are hyperlinks.
You can click on a link and jump to another document.
When you move the mouse over a link, the mouse arrow will turn into a little hand.
Note: A link does not have to be text. A link can be an image or any other HTML element!

HTML Links - Syntax
The HTML <a> tag defines a hyperlink. It has the following syntax:
<a href="url">link text</a>

EX:
<a href="https://www.google.co.in/" target="_blank">google</a>
    <!-- // here href is hyperlink reference where we provide links to another page.
    //and target is an attribute which is use to specify whether the link will open in same tab or a new tab  -->
    <a href="Basic.html">CLick_me</a>
    <!-- to open another file in the same folder -->
    
    <img src="pngtree-smile-dog-on-white-background-png-image_9160783.png" alt="img" width="100px">
    <!-- opens image located in same folder, alt shows text contained within "" if there is an issue with the image -->
    <img src="images/pexels-kowalievska-1170986.jpg" alt="" width="100px">
    <!-- to display image in a sub folder -->
    <img src="../Day1/pexels-george-desipris-792381.jpg" alt="" width="100px">
    <!-- to display image in parent folders -->
    <img src="C:/image/X9Npn_1559738818.jpg" alt="" width="100px">
    <!-- to display image with path, sometimes it may not show this image in 
    such case we will have to go to original code file inside folder and run it from there  -->
==================================================================================
Lists
<ul>	Defines an unordered list
<ol>	Defines an ordered list
<li>	Defines a list item
<dl>	Defines a description list
<dt>	Defines a term in a description list
<dd>	Describes the term in a description list

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lists</title>
</head>
<body>
    <ol type="i">
        <li>HTML</li>
        <li>CSS</li>
        <li>JAVASCRIPT</li>
        <li>BOOTSTRAP</li>
    </ol>
    <!-- ol: ordered list and type attribute is used to provide order (by default it is 1 i.e will give numbers)
     i.e A:A,B,C,D 
     i(for smallcase roman):i,ii,iii  I(for Uppercase roman:I,III etc)
     li: list item -->

    <ul type="Square">
        <li>HTML</li>
        <li>CSS</li>
        <li>JAVASCRIPT</li>
        <li>BOOTSTRAP</li>
    </ul>
    <!-- ul: unordered list, type here gives sybols like circle,square, by default it is disk -->

    <dl>
        <dt>Python</dt>
        <dd>A general purpose language</dd>

        <dt>HTML</dt>
        <dd>Hypertext markup language</dd>
    </dl>
    <!-- dl:Defines a description list
    dt: Defines a term in a description list
    dd: Describes the term in a description list
 -->

 <!-- Nested list -->
 <ol type="i">
    <li>HTML</li>
    <ol type="A">
        <li>Web Application</li>
        <li>Desktop Application</li>
        <li>Mobile Application</li>
    </ol>
    <li>CSS</li>
    <li>JAVASCRIPT</li>
    <li>BOOTSTRAP</li>
</ol>
</body>
</html>

==================================================================================
Day 3 20/12/24
Tables:
HTML tables allow web developers to arrange data into rows and columns.
Tag	Description
<table>
Defines a table
<th>
Defines a header cell in a table
<tr>
Defines a row in a table
<td>
Defines a cell in a table
<caption>
Defines a table caption
<colgroup>
Specifies a group of one or more columns in a table for formatting
<col>
Specifies column properties for each column within a <colgroup> element
<thead>
Groups the header content in a table
<tbody>
Groups the body content in a table
<tfoot>
Groups the footer content in a table

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Table </title>
</head>
<body>
    <table border="1" width="75%">
        <!-- if we dont define border the table 
         will be created wtihout any border 
        if we dont define  width it will only take 
        required width-->
        <caption><b>Employee Details/ Verticle Table</b></caption>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>City</th>
        </tr>
        <tr>
            <td>101</td>
            <td>Chaitanya</td>
            <td>Ghatkopar</td>
        </tr>
        <tr>
            <td>102</td>
            <td>Pritik</td>
            <td>Kharghar</td>
        </tr>
        <tr>
            <td>103</td>
            <td>Chait</td>
            <td>Mumbai</td>
        </tr>
        <tr>
            <td>104</td>
            <td>Prem</td>
            <td>Navi Mumbai</td>
        </tr>
    </table>
    <br>
    <br>

    <table border="2">
        <caption><b>Horizontal Table</b></caption>
    <tr>
        <th>ID</th>
        <td>101</td>
        <td>102</td>
        <td>103</td>
        <td>104</td>
    </tr>
    <tr>
        <th>Name</th>
        <td>Chaitanya</td>
        <td>Prem</td>
        <td>Pritik</td>
        <td>Chait</td>
    </tr>

    <tr>
        <th>City</th>
        <td>Mumbai</td>
        <td>Navi Mumbai</td>
        <td>Kharghar</td>
        <td>Ghatkopar</td>
    </tr>
    </table>
<br>
    <table border="2" width="25%">
        <caption><b>Horizontal Table Column merge</b></caption>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th colspan="2">Phone</th>
            <!-- colspan is used to merge columns -->
        </tr>
        <tr>
            <td>101</td>
            <td>Chait</td>
            <td>8451086652</td>
            <td>8108425639</td>
        </tr>
        <tr>
            <td>102</td>
            <td>GIT</td>
            <td>8888602638</td>
            <td>8108425639</td>
        </tr>
        <tr>
            <td>102</td>
            <td>Prem</td>
            <td>8888888877</td>
            <td>8888845108</td>
        </tr>
    </table>

    <br>
    <img src="/Day3/images.png" width="200">
    <table border="2">
        <caption><b>Horizontal Table row merge</b></caption>
    <tr>
        <th>ID</th>
        <td>101</td>
        <td>102</td>
        <td>103</td>
        <td>104</td>
    </tr>
    <tr>
        <th>Name</th>
        <td>Chaitanya</td>
        <td>Prem</td>
        <td>Pritik</td>
        <td>Chait</td>
    </tr>

    <tr>
        <th rowspan="2">City</th>
         <!-- rowspan is used to merge columns -->
        <td>Mumbai</td>
        <td>Navi Mumbai</td>
        <td>Kharghar</td>
        <td>Ghatkopar</td>
    </tr>
    <tr>
        <td>Mumbai</td>
        <td>Navi Mumbai</td>
        <td>Kharghar</td>
        <td>Ghatkopar</td>
    </tr>

    </table>

    <br>
    <video width="300px" muted controls autoplay>
        <source src="/Day3/6394054-uhd_4096_2048_24fps.mp4">
    </video>
    <!-- muted and autoplay is required if you want to play video when page loads, without muted video/audio wont autoplay  -->
    <audio src="/Day3/nature-investigation-255161.mp3" muted controls autoplay></audio>
    <br>
    <iframe src="index.html" frameborder="0"></iframe>
    <!-- iframe is used to display page within page -->
</body>
</html>
==================================================================================
Day 4 23/12/24
Forms:
An HTML form is used to collect user input. The user input is most often sent to a server for processing.

The Action Attribute
The action attribute defines the action to be performed when the form is submitted.
Usually, the form data is sent to a file on the server when the user clicks on the submit button.

The Method Attribute
The method attribute specifies the HTTP method to be used when submitting the form data.

Notes on GET:
Appends the form data to the URL, in name/value pairs
NEVER use GET to send sensitive data! (the submitted form data is visible in the URL!)
The length of a URL is limited (2048 characters)
Useful for form submissions where a user wants to bookmark the result
GET is good for non-secure data, like query strings in Google


Notes on POST:
Appends the form data inside the body of the HTTP request (the submitted form data is not shown in the URL)
POST has no size limitations, and can be used to send large amounts of data.
Form submissions with POST cannot be bookmarked
Tip: Always use POST if the form data contains sensitive or personal information!

The HTML <form> Elements
The HTML <form> element can contain one or more of the following form elements:
•	<input>
•	<label>
•	<select>
•	<textarea>
•	<button>
•	<fieldset>
•	<legend>
•	<datalist>
•	<output>
•	<option>
•	<optgroup>
HTML Input Types
Here are the different input types you can use in HTML:
•	<input type="button">
•	<input type="checkbox">
•	<input type="color">
•	<input type="date">
•	<input type="datetime-local">
•	<input type="email">
•	<input type="file">
•	<input type="hidden">
•	<input type="image">
•	<input type="month">
•	<input type="number">
•	<input type="password">
•	<input type="radio">
•	<input type="range">
•	<input type="reset">
•	<input type="search">
•	<input type="submit">
•	<input type="tel">
•	<input type="text">
•	<input type="time">
•	<input type="url">
•	<input type="week">

Form example:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Form</title>
</head>
<body>
    <form action="">
        <fieldset>
            <legend>Personal</legend>
            Name: <input type="text"><br>
            Gender: <input type="radio" value="Male" name="Gender">Male
            <input type="radio" value="Female" name="Gender">Female <br>
            Hobbies: <input type="checkbox" name="Reading" value="Reading">Reading
            <input type="checkbox" name="Writing" value="Writing">Writing <br>
            State: <select name="State" >
                <option value="">MH</option>
                <option value="">MP</option>
                <option value="">UP</option>
                <option value="">Goa</option>
            </select><br>
            City: <input list="city">
            <datalist id="city">
                <option value="Pune">
                    <option value="Mumbai">
                        <option value="Alibag">

            </datalist><br>

        </fieldset>
        <fieldset>
            Color: <input type="color" name="" id=""><br>
            Date: <input type="date" name="" id=""><br>
            Time: <input type="month"><br>
            email: <input type="email" name="" id=""><br>
            Password: <input type="password" name="" id=""><br>
            Photo: <input type="image" src="/Day 1/pexels-george-desipris-792381.jpg" width="150px"><br>
            Age: <input type="number" name="" id=""><br>
            Salary Package: 5000 <input type="range" min="5000" max="50000">50000 <br>
            Google: <input type="search" name="" id=""><br>
            Phone: <input type="tel" name="" id=""><br>
            Web site: <input type="url" name="" id=""><br>
            Week: <input type="week" name="" id=""><br>
            Address: <textarea rows="8" cols="30"></textarea><br>

            <input type="submit"><br>
            <input type="reset" name="" id="">
        </fieldset>
    </form>
</body>
</html>

Form Example 2:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Form table</title>
</head>
<body>
    <form method="get">
        <fieldset>
            <legend>Personal Info</legend>
            <table>
                <tr>
                    <td><label for="">Full Name</label></td>
                    <td><input type="text" name="fname" id=""></td>
                </tr>
                <tr>
                    <td><label for="">Address</label></td>
                    <td><textarea name="Addr" rows="7" cols="20" id=""></textarea></td>
                </tr>
                <tr>
                    <td>Age</td>
                    <td><input type="number" name="age" id=""></td>
                </tr>
                <tr>
                    <td><label for="">Hobbies</label></td>
                    <td><input type="checkbox" name="reading" value="Reading">Reading
                    <input type="checkbox" name="Writing" value="Writing" id="">Writing</td>
                </tr>
                <tr><td><input type="submit" name="" id=""></td>
                <td><input type="reset" value="cancel"></td></tr>
            </table>
            
        </fieldset>
        <fieldset>
            <legend>Academics</legend>
        </fieldset>
    </form>
</body>
</html>

Assignment: We have to complete the Academics part in this one

<fieldset>
            <legend>Academics</legend>
            <table>
                <tr>
                    <td><label for="">Highest Education</label></td>
                    <!-- <td><select name="Highest Education" id="">
                        <option value="">Masters</option>
                        <option value="">Bacholers</option>
                        <option value="">HSC</option>
                        <option value="">SSC</option>
                    </select></td> -->
                    <td><input list="Highest Education">
                    <datalist id="Highest Education">
                        <option value="Masters">
                            <option value="Bacholers">
                            <option value="HSC">
                            <option value="SSC">
                    </datalist>
                    </td>
                </tr>
                <tr>
                    <td><label for="">College Name</label></td>
                    <td><input type="text" name="" id=""></td>
                </tr>
                <tr>
                    <td><label for="">Percentage</label></td>
                    <td><input type="number" name="" id=""></td>
                    
                </tr>
                <tr>
                    <td><label for="">College Address</label></td>
                    <td><textarea name="Addr" rows="" cols="20" id=""></textarea></td>
                </tr>
                <tr>
                    <td><label for="">Certifications</label></td>
                    <td><input type="text"></td>
                </tr>
                <tr><td><input type="submit" name="" id=""></td>
                    <td><input type="reset" value="cancel"></td></tr>
            </table>
        </fieldset>
Insert above code in academics fieldset
==================================================================================
Day 5 03/01/2025

Assignment
Sign Up form

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign Up Form</title>
    <style>
        /* Ensure inputs and textarea fill the full width of their table cell */
        input[type="text"], input[type="email"], textarea {
            width: 100%;
            box-sizing: border-box; /* Includes padding and borders in width */
        }
    </style>
</head>
<body>
    <h1>Website Design Form</h1>
    <form method="get">
        <fieldset>
            <table>
                <tr>
                    <td><label for="Full Name">Full Name</label></td>
                    <td><input type="text" name="fname" placeholder="First Name"></td>
                    <td><input type="text" name="lname" placeholder="Last Name"></td>
                </tr>
                <tr>
                    <td><label for="email">Email:</label></td>
                    <td colspan="2"><input type="email" id="email" name="email" placeholder="Enter your email" required></td>
                </tr>
                <tr>
                    <td><label for="Phone">Phone Number</label></td>
                    <td><input type="text" placeholder="+ Area code"></td>
                    <td><input type="text" name="phone" placeholder="Phone Number"></td>
                </tr>
                <tr>
                    <td><label for="company">Company:</label></td>
                    <td colspan="2"><input type="text" id="company" name="company" placeholder="Company Name"></td>
                </tr>
                <tr>
                    <td><label for="">Type Of Business</label></td>
                    <td><input type="checkbox" name="Technology" value="Technology">Technology</td>
                    <td><input type="checkbox" name="Food" value="Food">Food</td>
                    <td><input type="checkbox" name="Beauty" value="Beauty">Beauty</td>
                    <td><input type="checkbox" name="Finance" value="Finance">Finance</td>
                </tr>
                <tr>
                    <td><label for="">Type Of Website You Need</label></td>
                    <td><input type="checkbox" name="Personal" id="" value="Personal">Personal</td>
                    <td><input type="checkbox" name="Educational" id="" value="Educational">Educational</td>
                    <td><input type="checkbox" name="Sport" id="" value="Sport">Sport</td>
                    <td><input type="checkbox" name="Food" id="" value="Food">Food</td>
                    
                </tr>
                <tr>
                    <td></td>
                    <td><input type="checkbox" name="Local Business" id="" value="Local Business">Local Business</td>
                    <td><input type="checkbox" name="Small Business" id="" value="Small Business">Small Business</td>
                    <td><input type="checkbox" name="Medium Business" id="" value="Medium Business">Medium Business</td>
                </tr>
                <tr>
                    <td><label for="">Navigation Bar Items</label></td>
                    <td><input type="checkbox" name="About" id="" value="About">About</td>
                    <td><input type="checkbox" name="FAQ" id="" value="FAQ">FAQ</td>
                    <td><input type="checkbox" name="User Guide" id="" value="User Guide">User Guide</td>
                </tr>
                <tr>
                    <td><label for=""></label></td>
                    <td><input type="checkbox" name="Forum" id="" value="Forum">Forum</td>
                    <td><input type="checkbox" name="Blog" id="" value="Blog">Blog</td>
                    <td><input type="checkbox" name="Pricing" id="" value="Pricing">Pricing</td>
                </tr>
                <tr>
                <tr>
                    <td><label for="">More Items:</label></td>
                    <td colspan="2"><input type="text" name="moreItems" placeholder="Additional items"></td>
                </tr>
                <tr>
                    <td><label for="">Additional Services</label></td>
                    <td><input type="checkbox" name="Banner Design" id="" value="Banner Design">Banner Design</td>
                    <td><input type="checkbox" name="SEO" id="" value="SEO">SEO</td>
                    <td><input type="checkbox" name="Landing Page Design" id="" value="Landing Page Design">Landing Page Design</td>
                </tr>
                <tr>
                    <td><label for=""></label></td>
                    <td><input type="checkbox" name="Video" id="" value="Video">Video</td>
                    <td><input type="checkbox" name="Analytics" id="" value="Analytics">Analytics</td>
                    <td><input type="checkbox" name="Adevertisement Management" id="" value="Adevertisement Management">Adevertisement Management</td>
                </tr>

                <tr>
                    <td><label for="">Additional Comments:</label></td>
                    <td colspan="2"><textarea name="comments" rows="7" placeholder="Enter your comments"></textarea></td>
                </tr>
            </table>
        </fieldset>
    </form>
</body>
</html>

==================================================================================
Day 6 09/01/2025
CSS

What is CSS
CSS stands for Cascading Style Sheets
CSS describes how HTML elements are to be displayed on screen, paper, or in other media
CSS saves a lot of work. It can control the layout of multiple web pages all at once
External stylesheets are stored in CSS files.
CSS Syntax
CSS selector
 
Ex:
h1{
color: blue;
font-size:12px;
}
The selector points to the HTML element you want to style.
The declaration block contains one or more declarations separated by semicolons.

CSS element Selector
The element selector selects HTML elements based on the element name.

Example
Here, all <p> elements on the page will be center-aligned, with a red text color: 
p {
  text-align: center;
  color: red;
}

Two types:
•	ID selector: To apply individual style to element ID selector is used.
•	Class selector: To apply style to a group of element ID selector is used.


CSS ID Selector
The id selector uses the id attribute of an HTML element to select a specific element.
The id of an element is unique within a page, so the id selector is used to select one unique element!
To select an element with a specific id, write a hash (#) character, followed by the id of the element.
Example
The CSS rule below will be applied to the HTML element with id="para1": 
#para1 {
  text-align: center;
  color: red;
}

CSS CLASS Selector
The class selector selects HTML elements with a specific class attribute.
To select elements with a specific class, write a period (.) character, followed by the class name.
Example
In this example all HTML elements with class="center" will be red and center-aligned: 
.center {
 text-align: center;
 color: red;
}

Universal Selector
The universal selector (*) selects all HTML elements on the page.
Example
The CSS rule below will affect every HTML element on the page: 
* {
  text-align: center;
  color: blue;
}
==================================================================================
Three Ways to Insert CSS
There are three ways of inserting a style sheet:
External CSS (Has the lowest priority amongst three)
Internal CSS
Inline CSS (Has the highest priority amongst three)

External CSS
With an external style sheet, you can change the look of an entire website by changing just one file!
Each HTML page must include a reference to the external style sheet file inside the <link> element, inside the head section.

Internal CSS
An internal style sheet may be used if one single HTML page has a unique style.
The internal style is defined inside the <style> element, inside the head section.

Inline CSS
An inline style may be used to apply a unique style for a single element.
To use inline styles, add the style attribute to the relevant element. The style attribute can contain any CSS property.
==================================================================================
Day 7 14/01/2025
CSS Borders 
Style: The border-style property specifies what kind of border to display.
dotted - Defines a dotted border
dashed - Defines a dashed border
solid - Defines a solid border
double - Defines a double border
groove - Defines a 3D grooved border. The effect depends on the border-color value
ridge - Defines a 3D ridged border. The effect depends on the border-color value
inset - Defines a 3D inset border. The effect depends on the border-color value
outset - Defines a 3D outset border. The effect depends on the border-color value
none - Defines no border
hidden - Defines a hidden border
we can also give each side of border a different style.

Width: The border-width property specifies the width of the four borders.(i.e. top, bottom left, right borders)
Color: The border-color property is used to set the color of the four borders.
The color can be set by:
•	name - specify a color name, like "red"
•	HEX - specify a HEX value, like "#ff0000"
•	RGB - specify a RGB value, like "rgb(255,0,0)"
•	HSL - specify a HSL value, like "hsl(0, 100%, 50%)"
•	transparent
Note: We can write “border: dashed orange 6px;” to make the code compact
===========================================================================
The CSS Box Model
The CSS box model is a box that wraps around every HTML element. It consists of: content, padding, borders and margins. The image below illustrates the box model:
 
Explanation of the different parts:
•	Content - The content of the box, where text and images appear
•	Padding - Clears an area around the content. The padding is transparent
•	Border - A border that goes around the padding and content
•	Margin - Clears an area outside the border. The margin is transparent
The box model allows us to add a border around elements, and to define space between elements. 

CSS Text
Text Color and Background Color: changes color of text and background of the text
Text Alignment: aligns text to the left, right, centre, Justify of screen
Text Decoration: underline, overline, linethrough can be applied we can also change the color and style of these decorations as well
Text Transformation
Text Spacing
Text Shadow
All of this is shown in example

===========================================================================
CSS Backgrounds
The CSS background properties are used to add background effects for elements.
following CSS background properties:
•	background-color: changes color of background
•	background-image: we can add an image to the background
•	background-repeat : if the image is small in size compared to screen it can be repeated to cover the whole screen. We can even specify relative axis to which we want the image to be repeated.
•	background-attachment: its either fixed (does not move and stays in the same place) or scroll (moves as we scroll the webpage
•	background-position: to set position of background (right-top, left-bottom, centre, etc.

Please check the example by running it that will in help understanding all the properties mentioned
Example :
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <p id="p1">Welcome To CSS Lecture</p>
    <p id="p2">Welcome To CSS Lecture</p>
    <p id="p3">Welcome To CSS Lecture</p>
    <p id="p4">Welcome To CSS Lecture</p>
    <p id="p5">Welcome To CSS Lecture</p>
    <p id="p6">Welcome To CSS Lecture</p>
    <p id="p7">Welcome To CSS Lecture</p>
    <p id="p8">Welcome To CSS Lecture</p>
    <p id="p9">Welcome To CSS Lecture
        <br>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Voluptatum rerum, aliquid vitae laboriosam saepe eligendi suscipit, atque consectetur placeat dolorem alias nostrum necessitatibus!
    </p>
    <p id="p10">Welcome To CSS Lecture
        <br>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Voluptatum rerum, aliquid vitae laboriosam saepe eligendi suscipit, atque consectetur placeat dolorem alias nostrum necessitatibus!
    </p>

    <p id="p11">CSS Box Model </p>
    <p id="p12">CSS Box Model with specific margin and padding </p>

    <p id="p13">Welcome To CSS Lecture</p>
    <p id="p14">Welcome To CSS Lecture</p>
    <p id="p15">Welcome To CSS Lecture</p>
    <p id="p16">Welcome To CSS Lecture</p>
    
    <div id="p17">

    </div>
</body>
</html>

CSS 
#p1{
    border-style: double;
    border-color: black;
    border-width: 5px;
}
#p2{
    border-style: dotted;
    border-color: blue;
    border-width: 10px;
}
#p3{
    border-style: solid;
    border-color: cyan;
    border-width: 5px;
}
#p4{
    border-style: dashed;
    border-color: pink;
    border-width: 5px;
}
#p5{
    border-style: groove;
    border-color: palegreen;
    border-width: 5px;
}
#p6{
    border-style: ridge;
    border-color: skyblue;
    border-width: 5px;
}
#p7{
    border-style: inset;
    border-color: crimson;
    border-width: 10px;
}
#p8{
    border-style: outset;
    border-color: blueviolet;
    border-width: 10px;
}
#p9{
    /* Css on each side of the box  */
    border-top-style: double;
    border-bottom-style: dashed;
    border-left-style: solid;
    border-right-style: dotted;

    border-bottom-color: aqua;
    border-top-color: tomato;
    border-left-color: teal;
    border-right-color: red;
    
    border-width: 4px;
    border-radius: 10px;
}
#p10{
    border: dashed orange 6px;
    /* we can write border properties in this way to make it compact */
}

#p11{ 
    /* Box model implementation */
    border-style: double;
    border-color: black;
    border-width: 5px;

    height: 200px;
    width: 400px;
    padding: 20px;
    margin: 40px;
    /* we can specify margin and padding for each side specifically as well*/
}

#p11{ 
    /* Box model implementation */
    border-style: double;
    border-color: black;
    border-width: 5px;

    height: 200px;
    width: 400px;
    padding: 20px;
    margin: 40px;
    /* we can specify margin and padding for each side specifically as well*/
}

#p12{ 
    /* Box model implementation */
    border-style: double;
    border-color: black;
    border-width: 5px;

    height: 200px;
    width: 400px;
    padding-top: 50px;
    padding-bottom: 20px;
    padding-left: 40px;
    padding-right: 50px;
    /* space between element and border */

    margin-top: 20px;
    margin-bottom: 40px ;
    margin-left: 30px;
    margin-right: 50px;  
    /* space after border */
}

/* CSS text properties p13-p16 */
#p13{ 
    text-align: right;
    text-decoration: underline;
    text-transform: uppercase;
    color: brown;
    text-shadow: 2px 2px;
    letter-spacing: 4px;
    /* spacing between individual letters */
    word-spacing: 20px
    /* spacing between words */
}
#p14{ 
    text-align: left;
    text-decoration: line-through;
    text-transform: lowercase;
    /* color: olive;
    text-shadow: 2px 2px;
    letter-spacing: 4px;
    word-spacing: 20px */
}
#p15{ 
    text-align: center;
    text-decoration: overline;
    text-decoration-style: wavy;
    text-transform: capitalize;
    color: green;
    text-shadow: 2px 0px;
    letter-spacing: 2px;
    word-spacing: 20px
}
#p16{ 
    text-align: justify;
    text-decoration: underline;
    text-decoration-color: red;
    text-decoration-style: wavy;
    text-transform: uppercase;
    color: palevioletred;
    text-shadow: 0px 2px;
    letter-spacing: 4px;
    word-spacing: 10px
}

#p17{
    height: 400px;
    width: 100;
    /* height and width of background image */
    background-color: antiquewhite;
    background-image:url(https://cdn.pixabay.com/photo/2016/04/20/21/17/png-1342113_960_720.png);
    /* background image */

    background-repeat: no-repeat;
    /* means background image will not repeat */
    background-position: right top;
    /* position of the background image */
    background-attachment: fixed;
    /* will stay in fi */
}

===========================================================================
Day 8 16/01/2025
CSS 
Using CSS to make Iine elements (elements which take only required space in the row and not the whole row) to block elements (elements which take whole row space irrespective of their size) and vice-versa.

EX:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <Style>
        .d1 {
            display: inline;
            /* will make elements inline. i.e. they will take only required space */
            background-color: pink;
            border: 4px solid black;
            height: 50px;
            width: 50px;
        }

        .d2 {
            display: block;
            /* will make an element into block element i.e. it will take whole row's space */
        }

        .d3 {
            display: inline-block;
            /* will make an element into Inline-block element i.e. it will take specified block space within the line */
            background-color: pink;
            border: 4px solid black;
            height: 50px;
            width: 100px;
            text-align: center;
            /* text alignment  */
        }
    </Style>
</head>

<body>
    <p>list of links as a horizontal menu</p>

    <ul>
        <li class="d1"><a href="/HTML/Day 1/Basic.html" target="_blank">HTML Basic</a></li>
        <!--target="_blank" means after clicking the link it will open in new tab  -->
        <li class="d1"><a href="/HTML/Day 5/Signupform.html" target="_blank">HTML Sign Up form</a></li>
        <li class="d1"><a href="/CSS/CSS Day 2 CSS Borders/index.html" target="_blank">CSS Border</a></li>
    </ul>

    <h1>Displaying links as block elements</h1>

    <a class="d2" href="/HTML/Day 2/Basic.html" target="_blank">HTML</a>
    <a class="d2" href="/HTML/Day 3/Tables.html" target="_blank">HTML Tables</a>
    <a class="d2" href="/CSS/CSS Day1 Types Of CSS/cssex.html" target="_blank">CSS EXT</a>

    <p>Display a list of links as a horizontal menu:</p>

    <ul>
        <li class="d3"><a href="https://www.w3schools.com/css" target="_blank">HTML Basic</a></li>
        <li class="d3"><a href="/CSS/CSS Day 2 CSS Borders/index.html" target="_blank">CSS Border</a></li>
    </ul>
</body>
</html>

FlexBox:
EX:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
      *{
        font-family: cursive;
      }
      img{
        position: relative;
        /* position relative to the position of container (in this case div) */
        height: 100px;
        width: 100px;
        float: right;
        /* will be placed to the right */
        border: solid maroon;
      }
      div{
        height: 300px;
        width: 750px;
        border: dashed orangered;
      }
      p{
        color: rgb(101, 208, 235);
      }
      #i1{
        position: absolute;
        /* CSS property that allows elements to be positioned based on an absolute point on the page, relative to its parent element */
        z-index: -1;
        /* overlap order -ve means behind +ve means to the front */
        float: left;
        /* will be placed to the left */
      }
    </style>
</head>
<body>
    <div>
        <img src="pexels-george-desipris-792381.jpg">
        <img src="pexels-kowalievska-1170986.jpg"><br>
        <p>
        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ea, voluptatem tenetur. Quos harum odio reprehenderit culpa odit ratione? Labore debitis provident neque aspernatur impedit dignissimos error fuga! Fugit optio quae eum ea sunt nam laborum facere, voluptatum voluptate nulla commodi. Blanditiis velit ullam quisquam nisi! Eius id libero recusandae! Voluptates consectetur nisi molestiae dolores modi quos sed itaque maxime, libero, sit natus hic dolore corrupti rem?</p>
      
      </div>
      
      <p><img  id="i1" src="pexels-george-desipris-792381.jpg">Lorem ipsum dolor sit amet consectetur adipisicing elit. Delectus reprehenderit consequuntur deleniti adipisci expedita animi, debitis voluptatum, incidunt excepturi, asperiores provident doloribus labore reiciendis cupiditate eum. Et ducimus eius culpa?</p>
</body>
</html>

Images Properties:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .img1 {

            border-radius: 8px;
            /* image corner radius */
            border: 2px solid red;
        }

        .img2 {
            display: block;
            /* element type */
            margin-left: auto;
            margin-right: auto;
            /* space on left and right of the element will be equal i.e element will be placed in centre */
        }
    </style>

</head>

<body>
    <h1>
        Rounded Images
    </h1>
    <p>Use the border-radius property to create rounded images:</p>

    <img class="img1" src="pexels-kowalievska-1170986.jpg" alt="Image Cat" width="300">
    <br><br><br><br><br>

    <h2>Center an Image</h2>
    <p>To center an image, set left and right margin to auto, and make it into a block element.</p>

    <img class="img2" src="pexels-george-desipris-792381.jpg" alt="Image Tiger" style="width:50%">

</body>

Assignment: Make a tribute page for person of your choice.

Note: If you are having a problem go to live sever where your website is and right click > inspect > check for errors in console.

Assignment: Website for café, restaurant, 

===========================================================================
Day 9:  21/01/2025
JavaScript

•	JavaScript is the programming language of the web.
•	It can update and change both HTML and CSS.
•	It can calculate, manipulate and validate data.

The <script> Tag
In HTML, JavaScript code is inserted between <script> and </script> tags.
JavaScript in <head> or <body>
You can place any number of scripts in an HTML document.
Scripts can be placed in the <body>, or in the <head> section of an HTML page, or in both.
Note: Placing scripts at the bottom of the <body> element improves the display speed, because script interpretation slows down the display.
External scripts are practical when the same code is used in many different web pages.
JavaScript files have the file extension .js.
To use an external script, put the name of the script file in the src (source) attribute of a <script> tag:

External JavaScript Advantages:
Placing scripts in external files has some advantages:
•	It separates HTML and code
•	It makes HTML and JavaScript easier to read and maintain
•	Cached JavaScript files can speed up page loads

Display Possibilities
innerHTML
To access an HTML element, JavaScript can use the document.getElementById(id) method.
The id attribute defines the HTML element. The innerHTML property defines the HTML content:
NOTE: Changing the innerHTML property of an HTML element is a common way to display data in HTML.

document.write()
For testing purposes, it is convenient to use document.write():
Disadvantage: Using document.write() after an HTML document is loaded, will delete all existing HTML

window.alert()
You can use an alert box to display data:

console.log()
For debugging purposes, you can call the console.log() method in the browser to display data.
NOTE: from users point of view we will be using  document.getElementById(id) method most of the times
Examples:
Ex1:
demo.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <h1>First Web Page</h1>
    <p>Frist Paragraph</p>
    <script>
        document.write(5 - 6);
    </script>
    <button type="button" onclick="document.write(5-6)">Try it</button>
    <script>
        window.alert("Good Morning!")
        console.log("Have a Nice day!")
    </script>

    <h2 id="demo"> hi</h2>
    <script>
        document.getElementById("demo").innerHTML = "Welcome to JavaScript!";
        function func1() {
            document.getElementById("demo1").innerHTML = "Welcome to JavaScript!!!";
        }
    </script>

    <h2 id="demo1"> hi</h2>
    <button type="button" onclick="func1()">Try it</button>
    
</body>

</html>

Ex2:
demo1.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        alert("Hello From Head Script! ");
    </script>
</head>
<body>
    <p id="p1">
     Hello   
    </p>
    <script>
        console.log("Hello in Body Script");

    </script>
    <script src="script.js"></script>
</body>
</html>

script.js
alert("Hi From External File!!");
document.getElementById("p1").innerHTML = "Hello From External File";

Variables
Variables are Containers for Storing Data
JavaScript Variables can be declared in 4 ways:
Automatically
Using var
Using let
Using const

Comments:
Multi-line comments start with /* and end with */.
Any text between /* and */ will be ignored by JavaScript.
Single line comments start with //.

NOTE: (Difference between var and let) The var keyword was used in all JavaScript code from 1995 to 2015.
The let and const keywords were added to JavaScript in 2015.
The var keyword should only be used in code written for older browsers.

When to use:
1. Always declare variables
2. Always use const if the value should not be changed
3. Always use const if the type should not be changed (Arrays and Objects)
4. Only use let if you can't use const
5. Only use var if you MUST support old browsers.

Let
The let keyword was introduced in ES6 (2015)
Variables declared with let have Block Scope
Variables declared with let must be Declared before use
Variables declared with let cannot be Redeclared in the same scope

==================================================================================
Operators
Arithmetic Operators:
Operator	Description
+	               Addition
-	               Subtraction
*		Multiplication
**		Exponentiation (ES2016)
/		Division
%		Modulus (Division Remainder)
++		Increment
--		Decrement

Assignment Operators:
Operator	Example	Same As
=		x = y		x = y
+=		x += y		x = x + y
-=		x -= y		x = x - y
*=		x *= y		x = x * y
/=		x /= y		x = x / y
%=		x %= y		x = x % y
**=		x **= y		x = x ** y

Comparison Operators:
Operator	Description
==		equal to
===		equal value and equal type
!=		not equal
!==		not equal value or not equal type
>		greater than
<		less than
>=		greater than or equal to
<=		less than or equal to
?		ternary operator

Logical Operators:
Operator	Description
&&		logical and
||		logical or
!		logical not

Type Operators:
Operator	Description
typeof		Returns the type of a variable
instanceof	Returns true if an object is an instance of an object type

Ex:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <h3>Js Arithmetic Operators demo</h3>
    <p id="d1"></p>
    <p id="d2"></p>
    <p id="d3"></p>
    <p id="d4"></p>
    <p id="d5"></p>
    <p id="d6"></p>
    <p id="d7"></p>
    <p id="d8"></p>

    <h3>Js Assignment Operators demo</h3>
    <p id="c1"></p>
    <p id="c2"></p>
    <p id="c3"></p>
    <p id="c4"></p>
    <p id="c5"></p>
    <h3>Js Comparison Operators demo</h3>
    <p id="b1"></p>
    <p id="b2"></p>
    <p id="b3"></p>
    <p id="b4"></p>
    <p id="b5"></p>
    <p id="b6"></p>
    <p id="b7"></p>

    <script>
        let a = 10;
        var b = 3;
        const n = "hi";

        //code for arithmetic operator
        document.getElementById("d1").innerHTML = "A+B = " + (a + b);
        document.getElementById("d2").innerHTML = "A-B = " + (a - b);
        document.getElementById("d3").innerHTML = "A*B = " + (a * b);
        document.getElementById("d4").innerHTML = "A/B = " + (a / b);
        document.getElementById("d5").innerHTML = "A%B = " + (a % b);
        document.getElementById("d6").innerHTML = "A**B = " + (a ** b);
        document.getElementById("d7").innerHTML = "A++ = " + (++a);
        document.getElementById("d8").innerHTML = "B-- = " + (--b);

        //code for Assignment operator
        document.getElementById("c1").innerHTML = "A+=B = " + (a += b);
        document.getElementById("c2").innerHTML = "A-=B = " + (a -= b);
        document.getElementById("c3").innerHTML = "A*=B = " + (a *= b);
        document.getElementById("c4").innerHTML = "A/=B = " + (a /= b);
        document.getElementById("c5").innerHTML = "A%=B = " + (a %= b);

        //code for relational operator
        document.getElementById("b1").innerHTML = "A<B = " + (a < b);
        document.getElementById("b2").innerHTML = "A>B = " + (a > b);
        document.getElementById("b3").innerHTML = "A<=B = " + (a <= b);
        document.getElementById("b4").innerHTML = "A>=B = " + (a >= b);
        document.getElementById("b5").innerHTML = "A==B = " + (a == b);
        document.getElementById("b6").innerHTML = "A!=B = " + (a != b);

        var p, a1 = 23, b1 = 32;
        // condition/expression ? true part : false part
        p = a1 > b1 ? a1 : b1;
        document.getElementById("b7").innerHTML = "Ternary Op : " + p;

    </script>
</body>
</html>

==================================================================================
Day 10:   28/01/25
EX1:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h3>Js Equality Operator Demo</h3>
    <p id="d1"> </p>
    <p id="d2"> </p>
    <p id="d3"> </p>
    <p id="d4"> </p>
    <script>
        var a=6, b="6";
        //code for arthmetic operator
        document.getElementById("d1").innerHTML= "A==B = "+(a==b);
        document.getElementById("d2").innerHTML= "A!=B = "+(a!=b);
        document.getElementById("d3").innerHTML= "A===B = "+(a===b);
        document.getElementById("d4").innerHTML= "A!==B = "+(a!==b);
    </script>
</body>
</html>

Conditional Statements:
Very often when you write code, you want to perform different actions for different decisions.
You can use conditional statements in your code to do this.

In JavaScript we have the following conditional statements:
Use if to specify a block of code to be executed, if a specified condition is true
Use else to specify a block of code to be executed, if the same condition is false
Use else if to specify a new condition to test, if the first condition is false
Use switch to specify many alternative blocks of code to be executed

if Statement: (if should be in small case only)
if (condition) {
  //  block of code to be executed if the condition is true
}


If else Statement:
if (condition) {
  //  block of code to be executed if the condition is true
} else {
  //  block of code to be executed if the condition is false
}

EX2:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h3>Demo for if</h3>
    <p id="d1"></p>
    <h3>Demo for if</h3>
    <p id="d2"></p>
    <h3>Demo for if</h3>
    <p id="d3"></p>
    <h3>Demo for if</h3>
    <p id="d4"></p>

    <script>
        var a=-121;

        //Conditional 
        if(a>0)
    {
        document.getElementById("d1").innerHTML=a+"is +ve";
    }

    if(a>0)
    {
        document.getElementById("d2").innerHTML=a+"is +ve";
    }
    else{
        document.getElementById("d2").innerHTML=a+"is -ve";
    }

        if(a>0)
    {
        document.getElementById("d3").innerHTML=a+" is > 0";
    }
    else if(a==0)
    {
        document.getElementById("d3").innerHTML=a+"is 0";
    }
    else{
        document.getElementById("d3").innerHTML=a+"is < 0";
    }

    if(a>0)
    {
        if(a%2==0)
        {
            document.getElementById("d4").innerHTML=a+" A is +ve and Even.";
        }
        else
        {
            document.getElementById("d4").innerHTML=a+" A is +ve and Odd.";
        }
    }
    else if(a==0)
    {
        document.getElementById("d4").innerHTML=a+"is 0";
    }
    else{
        if(a%2==0)
        {
            document.getElementById("d4").innerHTML=a+" A is -ve and Even.";
        }
        else
        {
            document.getElementById("d4").innerHTML=a+" A is -ve and Odd.";
        }
    }
    </script>
</body>
</html>

===========================================================================
Day 11: 30/01/25

Switch Statement
The switch statement is used to perform different actions based on different conditions.
Syntax:
switch(expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
    // code block
}

EX:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <p id="demo"></p>
    <script>
        var d=1, day="";
        switch(d)
        {
            case 0:
                day= "Sunday";
                break;
                case 1:
                day= "Monday";
                break;
                case 2:
                day= "Tuesday";
                break;
                case 3:
                day= "Wednesday";
                break;
                case 4:
                day= "Thurday";
                break;
                case 5:
                day= "Friday";
                break;
                case 6:
                day= "Saturday";
                break;
                default : day= "Wrong day number";
        }
        document.getElementById("demo").innerHTML = "Today is " +day;
    </script>
</body>
</html>
===========================================================================
Loop
For Loop:
The for statement creates a loop with 3 optional expressions:
for (expression 1; expression 2; expression 3) {
  // code block to be executed
}
Expression 1 is executed (one time) before the execution of the code block.
Expression 2 defines the condition for executing the code block.
Expression 3 is executed (every time) after the code block has been executed.

Ex:
for (let i = 0; i < 5; i++) {
  text += "The number is " + i + "<br>";
}

While Loop:
The while loop loops through a block of code as long as a specified condition is true.
Syntax:
while (condition) {
  // code block to be executed
}

Do While Loop
Syntax:
do {
  // code block to be executed
}
while (condition);

Ex:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <h4>Demo for For loop</h4>
    <p id="c1"></p>
    <h4>Demo for While loop</h4>
    <p id="c2"></p>
    <h4>Demo for Do While loop</h4>
    <p id="c3"></p>
    <h4>Demo for Break Statement</h4>
    <p id="c4"></p>
    <h4>Demo for Continue Statement</h4>
    <p id="c5"></p>

    <script>
        var p = 5, q = 15, j = 1, k = 1;

        for (var i = 1; i <= 10; i++) {
            document.getElementById("c1").innerHTML += i + "<br>";
        }

        while (j <= 10) {
            document.getElementById("c2").innerHTML += p * j + " <br> "; j++;
        }

        do {
            document.getElementById("c3").innerHTML += k * q + "<br>";
            k++;
        }
        while (k <= 10);

        for (var i = 1; i <= 10; i++) {
            if (i == 5) { break; }
            document.getElementById("c4").innerHTML += i + " <br> ";
        }

        for (var i = 1; i <= 10; i++) {
            if (i == 5) 
            { continue; }
            document.getElementById("c5").innerHTML += i+" <br>";
        }
    </script>
</body>
</html>

===========================================================================
JavaScript Numbers
Check the example for further explaination.
EX:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h2>JavaScript Numbers</h2>
    <p>The toString() method converts a number to a string.</p>
    <p>The toString() method can output numbers from base 2 to 16:</p>

    <p id="demo"></p>

    <p>The toFixed() method rounds a number to a given number of digits.</p>
    <p>For working with money, toFixed(2) is perfect.</p>

    <p id="demo1"></p>
    <p>The valueOf() method returns a number as a number: </p>
    <!-- only if its a number, string will not be returned -->

    <p id="demo2"></p>
    <p>The global JavaScript function parseInt() converts string to numbers:</p>

    <p id="demo3"></p>

    <p>The parseFLoat() method convert strings to numbers:</p>

    <P id="demo4"></P>
    <h2>JavaScript Number Object Properties</h2>
    <p>MIN_VALUE returns the smallest number possible in JavaScript.</p>

    <p id="demo5"></p>

    <script>
        var myNumber = 32;
        document.getElementById("demo").innerHTML =
        "32 = " + "<br>" + 
        " Decimal " + myNumber.toString(10) + "<br>" +
        " Hexadecimal " + myNumber.toString(16) + "<br>" +
        " Octal " + myNumber.toString(8) + "<br>" +
        " Binary " + myNumber.toString(2);
        
        var x = 9.656;
        document.getElementById("demo1").innerHTML =
          x.toFixed(0) + "<br>" +
          x.toFixed(2) + "<br>" +
          x.toFixed(4) + "<br>" +
          x.toFixed(6);
        
         
        var x1 = 123;
        
        document.getElementById("demo2").innerHTML = 
          x1.valueOf() + "<br>" +
          (123).valueOf() + "<br>" +
          (100 + 23).valueOf();
        
        
        var y="1234";
        document.getElementById("demo3").innerHTML=parseInt(y);
        
        var z="1234.2356";
        document.getElementById("demo4").innerHTML=parseFloat(z);
        
        var a=Number.MIN_VALUE;
        var txt = a;
        
        var b=Number.MAX_VALUE;
        txt=txt+" <br> "+b;
        document.getElementById("demo5").innerHTML=txt;
        </script>
</body> 
</html>

===========================================================================
Day 12 3/02/2025

Creating Date Objects
Date objects are created with the new Date() constructor.
There are 9 ways to create a new date object:

new Date()
new Date(date string)

new Date(year,month)
new Date(year,month,day)
new Date(year,month,day,hours)
new Date(year,month,day,hours,minutes)
new Date(year,month,day,hours,minutes,seconds)
new Date(year,month,day,hours,minutes,seconds,ms)
new Date(milliseconds)

Date Get Methods
Method	Description
getFullYear()	Get year as a four digit number (yyyy)
getMonth()	Get month as a number (0-11)
getDate()	Get day as a number (1-31)
getDay()	Get weekday as a number (0-6)
getHours()	Get hour (0-23)
getMinutes()	Get minute (0-59)
getSeconds()	Get second (0-59)
getMilliseconds()	Get millisecond (0-999)
getTime()	Get time (milliseconds since January 1, 1970)

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h3>Date Methods</h3>
    <p id="p1"></p>
    <p id="p2"></p>
    <p id="p3"></p>
    <p id="p4"></p>
    <p id="p5"></p>
    <p id="p6"></p>
    <p id="p7"></p>
    <p id="p8"></p>
    <p id="p9"></p>

    <h3>Math Methods</h3>
    <p id="m1"></p>
    <p id="m2"></p>
    <p id="m3"></p>
    <p id="m4"></p>
    <p id="m5"></p>
 
    <script>
        const d =new Date();
        document.getElementById("p1").innerHTML=d;
        document.getElementById("p2").innerHTML=d.getDate();
        document.getElementById("p3").innerHTML=d.getDay();
        document.getElementById("p4").innerHTML=d.getFullYear();
        document.getElementById("p5").innerHTML=d.getHours();
        document.getElementById("p6").innerHTML=d.getMilliseconds();
        document.getElementById("p7").innerHTML=d.getMinutes();
        document.getElementById("p8").innerHTML=d.getMonth()+1;
        document.getElementById("p9").innerHTML=d.getSeconds();

        document.getElementById("m1").innerHTML=Math.PI;
        document.getElementById("m2").innerHTML=Math.min(14,15,78,23,33,-99,1,0);
        document.getElementById("m3").innerHTML=Math.max(14,15,78,23,33,-99,1,0);
        document.getElementById("m4").innerHTML=Math.pow(2,5);
        document.getElementById("m5").innerHTML=Math.sqrt(25);

    </script>
</body>
</html>

===========================================================================
JavaScript Function Syntax
A JavaScript function is defined with the function keyword, followed by a name, followed by parentheses ().

Function names can contain letters, digits, underscores, and dollar signs (same rules as variables).
The parentheses may include parameter names separated by commas:
(parameter1, parameter2, ...)
The code to be executed, by the function, is placed inside curly brackets: {}

function name(parameter1, parameter2, parameter3) {
  // code to be executed
}

Function parameters are listed inside the parentheses () in the function definition.
Function arguments are the values received by the function when it is invoked.
Inside the function, the arguments (the parameters) behave as local variables.
===========================================================================
Function Invocation
The code inside the function will execute when "something" invokes (calls) the function:
When an event occurs (when a user clicks a button)
When it is invoked (called) from JavaScript code
Automatically (self invoked)

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <p id="p1">hi how r u?</p>
    <input type="button" onclick="msg()" value="Click Me!">
    <!-- Function call -->

    <p id="p2">hi</p>
    <p id="p3"></p>

    <script>
        function msg(){
            document.getElementById("p1").innerHTML="Welcome to JS!!! \n State your business";
        }
        function add(a,b){
            document.getElementById("p2").innerHTML="Called in JS :"+(a+b);
        }
        add(10,20);
        // function call

        function mul(){
            var x=12,y=5; //local parameters
            return(x*y);
        }
        var p=mul();
        document.getElementById("p3").innerHTML="Call with return and local arg : "+p;

    </script>

</body>
</html>

===========================================================================
Arrow Function
It gets shorter! If the function has only one statement, and the statement returns a value, you can remove the brackets and the return keyword:

Arrow Functions Return Value by Default:
hello = () => "Hello World!";

Note: This works only if the function has only one statement.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    
    <h1>JavaScript Functions</h1>
    <h2>The Arrow Function</h2>

    <P>This example shows the syntax of an Arrow function, and how to use it.</P>

    <p id="demo"></p>
    <p id="p1"></p>
    <p id="p2"></p>

    <script>
        let myFunction = (a,b,c) => (a+b)*c;
        document.getElementById("demo").innerHTML = myFunction(4,5,2);
        let hello=()=> " Hello World";
        document.getElementById("p1").innerHTML=hello();

    </script>
</body>
</html>

===========================================================================
Arrays
An array is a special variable, which can hold more than one value:
Using an array literal is the easiest way to create a JavaScript Array.

Syntax:
const array_name = [item1, item2, ...];   

The following example also creates an Array, and assigns values to it:
Example
const cars = new Array("Saab", "Volvo", "BMW");

The two examples above do exactly the same.
There is no need to use new Array().
For simplicity, readability and execution speed, use the array literal method.

Accessing Array Elements
You access an array element by referring to the index number:
Note: Array indexes start with 0.
[0] is the first element. [1] is the second element.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h5>Demo For Array Creation</h5>
    <p id="a1"></p>
    <p id="a2"></p>
    <h5>Demo For Array Element  Access</h5>
    <p id="a3"></p>
    <h5>JavaScript uses names to access object properties</h5>
    <p id="a4"></p>
    <h5>Array Length property</h5>
    <p id="a5"></p>
    <h5>The best way to loop through an array is using a standard for loop:</h5>
    <p id="demo"></p>
    <h5>The best way to loop through an array is using a standard for each loop:</h5> 
    <p id="demo1"></p>
    <h5>Demo For converting array to string using toString()</h5>
    <p id="a6"></p>
    <h5>Demo For converting array to string using join()</h5>
    <p id="a7"></p>
    <h5>Demo For pop() </h5>
    <p id="a8"></p>
    <H5>Array after pop function</H5>
    <p id="a9"></p>
    <H5>Shifting Element</H5>
    <p><i>The shift() method removes the first element of an array  
    
        <p id="a10"></p>
        <p id="a11"></p>
    <p id="a12"></p>
    <p id="a13"></p>
    <p id="a14"></p>
    <p id="a15"></p>
    
    <script>

        var a=[10,201,30,403,507,60],i=0;
        var txt=" ",t=" ";
        var s=new Array("ASD","QWE","MNB");
        
        document.getElementById("a1").innerHTML=a;
        
        document.getElementById("a2").innerHTML=s;
        document.getElementById("a3").innerText="S[2] = "+s[2];//MNB
        
        document.getElementById("a5").innerText="Total elements in Array 1 : "
        +a+"  =  "+a.length;

        for(i=0;i<a.length;i++)
    {
        if(a[i]%2==0)
    {
        document.getElementById("demo").innerHTML += a[i] +"    ";
    }
    }

    document.getElementById("a6").innerHTML=s.toString();
    document.getElementById("a7").innerHTML=s.toString("@");
    var x=a.pop();//remove last element
    document.getElementById("a8").innerHTML=" popped element is : "+x;
    document.getElementById("a9").innerHTML=" Array after pop() : "+a;

    document.getElementById("a10").innerHTML= a;
    a.shift(); //removes first element
    document.getElementById("a11").innerHTML=a;
    document.getElementById("a12").innerHTML=a.push("ABC");
    //adds element at the end
    document.getElementById("a14").innerHTML= "new array is : "+a;
    a.unshift("kjil"); //adds element at 
    document.getElementById("a9").innerHTML="new array wiith unshift()"+a;

    </script>
</body>
</html>

===========================================================================
Day 13: 4/02/2025

Strings
Strings are for storing text
Strings are written with quotes

Using Quotes
A JavaScript string is zero or more characters written inside quotes.
Strings created with single or double quotes work the same.
There is no difference between the two.

EX:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>

    <h2>JavaScript String Methods</h2>
    <p id="p2"></p>
    <p id="p3"></p>
    <p id="p1"></p>
    <p id="demo"></p>
    <p id="demo1"></p>
    <p id="demo2"></p>
    <p id="demo3"></p>
    <p id="demo4"></p>
    <p id="demo5"></p>
    <p id="demo6"></p>
    <p id="demo7"></p>
    <p id="demo8"></p>
    <p id="demo9"></p>
    <p id="demo10"></p>
    <p id="demo11"></p>
    <p id="demo12"></p>
    <p id="demo13"></p>
    <p id="demo14"></p>
    <script>
        let str = "Apple, Banana, Kiwi";
        let str1 = 'Hello !!!';
        document.getElementById("p2").innerHTML = str;
        document.getElementById("p3").innerHTML = str1;
        document.getElementById("p1").innerHTML = "length of string is" + str.length;
        document.getElementById("demo").innerHTML = "Slice-> " + str.slice(-10, -6);
        document.getElementById("demo1").innerHTML = "Substing-> " + str.substring(10, 16);
        document.getElementById("demo2").innerHTML = "Substr-> " + str.substr(10, 5);
        document.getElementById("demo3").innerHTML = "Replace-> " + str.replace("Apple", "Grapes");
        document.getElementById("demo4").innerHTML = "uppercase-> " + str.toUpperCase();
        document.getElementById("demo5").innerHTML = "lowercase-> " + str.toLowerCase();
        document.getElementById("demo6").innerHTML = "concat-> " + str.concat(str1);
        document.getElementById("demo7").innerHTML = "charAt-> " + str.charAt(4);
        document.getElementById("demo8").innerHTML = "charCodeAt-> " + str.charCodeAt(4);

        document.getElementById("demo9").innerHTML = "str[8]-> " + str[8];
        let arr = str.split(",");
        document.getElementById("demo10").innerHTML = "Arr[1] " + arr[1];
        let str2 = "Please locate where 'locate' occurs!";
        document.getElementById("demo11").innerHTML = "Indexof " + str2.indexOf("locate");
        document.getElementById("demo12").innerHTML = "Last index of " + str2.lastIndexOf("locate");
        let text = "Hello world, welcome to the universe.";
        document.getElementById("demo13").innerHTML = "start with " + text.startsWith("Hello");
        document.getElementById("demo14").innerHTML = " End with " + text.endsWith("universe.");

    </script>

</body>

</html>

===========================================================================
Form Validation:
Ex:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

    <style>
        #demo {
            color: red;
        }
    </style>
</head>

<body>

    <form name="myForm" action="" onsubmit="return validateForm()" method="get">
        Name: <input type="text" name="fname">
        Email : <input type="text" name="email">
        Password: <input type="password" name="pwd">
        <input type="submit" value="Submit">
    </form>

    <script>
        function validateForm() {
            var x = document.forms["myForm"]["fname"].value;
            var y = document.forms["myForm"]["email"].value;
            var z = document.forms["myForm"]["pwd"].value;
            atpos = y.indexOf("@");
            dotpos = y.lastIndexOf(".");
            if (x == "") {

                alert("Name must be filled out");
                //return false;
            }
            else if (atpos < 1 || (dotpos - atpos < 2)) {
                alert("Please enter correct email ID");

                return false;
            }
            else if (z.length < 6) {
                alert(" Not Valid pwd");
                return false;
            }
            return true;
        }
    </script>

    <p>Please input a number between 1 and 10:</p>
    <input id="numb">
    <button type="button" onclick="myFunction()">Submit</button>
    <p id="demo"></p>
    <script>
        function myFunction() {
            var x, text;

            // Get the value of the input field with id="numb"
            x = document.getElementById("numb").value;

            // If x is Not a Number or less than one or greater than 10
            if (isNaN(x) || x < 1 || x > 10) {
                text = "Input not valid";
            } else {
                text = "Input OK";
            }
            document.getElementById("demo").innerHTML = text;
        }
    </script>
</body>
</html>

Ex:2 // form validation
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        #demo {
            color: red;
        }
    </style>
</head>

<body>
    <form name="myForm" action="" onsubmit="return validateForm()" method="get">
        Name: <input type="text" name="fname">
        Email : <input type="text" name="email">
        Password: <input type="password" name="pwd">
        <input type="submit" value="Submit">
    </form>

    <script>
        function validateForm() {
            var x = document.forms["myForm"]["fname"].value;
            var y = document.forms["myForm"]["email"].value;
            var z = document.forms["myForm"]["pwd"].value;
            atpos = y.indexOf("@");
            dotpos = y.lastIndexOf(".");
            if (x == "") {

                alert("Name must be filled out");
                //return false;
            }
            else if (atpos < 1 || (dotpos - atpos < 2)) {
                alert("Please enter correct email ID");

                return false;
            }
            else if (z.length < 6) {
                alert(" Not Valid pwd");
                return false;
            }
            return true;
        }
    </script>

    <p>Please input a number between 1 and 10:</p>
    <input id="numb">
    <button type="button" onclick="myFunction()">Submit</button>
    <p id="demo"></p>
    <script>
        function myFunction() {
            var x, text;

            // Get the value of the input field with id="numb"
            x = document.getElementById("numb").value;

            // If x is Not a Number or less than one or greater than 10
            if (isNaN(x) || x < 1 || x > 10) {
                text = "Input not valid";
            } else {
                text = "Input OK";
            }
            document.getElementById("demo").innerHTML = text;
        }
    </script>
</body>
</html>

Ex:3 // calculator example
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>

    <h2>The input Element</h2>

    <form action="/action_page.php">
        <label for="Num1">Number 1:</label><br>
        <input type="text" id="n1" name="n1"><br><br>
        <label for="Num2">Number 2:</label><br>
        <input type="text" id="n2" name="n2"><br><br>
        <label for="Num1">Result:</label><br>
        <h2 id="r1"></h2>
        <input type="button" value="+" onclick="add()">
        <input type="button" value="-" onclick="sub()">
        <input type="button" value="*" onclick="mul()">
        <input type="button" value="/" onclick="div()">
        <input type="button" value="%" onclick="mod()">

    </form>
    <script>

        function add() {
            const x = parseInt(document.getElementById('n1').value);
            const y = parseInt(document.getElementById("n2").value);
            document.getElementById('r1').innerHTML = (x + y);
        }

        function sub() {
            const x = parseInt(document.getElementById('n1').value);
            const y = parseInt(document.getElementById("n2").value);
            document.getElementById('r1').innerHTML = (x - y);
        }

        function mul() {
            const x = parseInt(document.getElementById('n1').value);
            const y = parseInt(document.getElementById("n2").value);
            document.getElementById('r1').innerHTML = (x * y);
        }

        function div() {
            const x = parseInt(document.getElementById('n1').value);
            const y = parseInt(document.getElementById("n2").value);
            document.getElementById('r1').innerHTML = (x / y);
        }

        function mod() {
            const x = parseInt(document.getElementById('n1').value);
            const y = parseInt(document.getElementById("n2").value);
            document.getElementById('r1').innerHTML = (x % y);
        }
    </script>
</body>
</html>

Ex:4 // calculator example using form method
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

    <style>
        #demo {
            color: red;
        }
    </style>
</head>

<body>

    <form name="myForm" action="" onsubmit="return calculate(event)" method="get">
        Num1: <input type="number" name="numb1"  required>
        num2 : <input type="number" name="numb2" required>
        <br>
        <select name="operation">
            <option value="add">+</option>
            <option value="sub">-</option>
            <option value="mul">*</option>
            <option value="div">/</option>
            <option value="mod">%</option>
        </select>

        <br><br>
        <input type="submit" value="Calculate">
    </form>

    <h2 id="result"></h2>

    <script>
         function calculate(event) {
            event.preventDefault(); // Prevent form from refreshing

            let x = parseFloat(document.forms["myForm"]["numb1"].value);
            let y = parseFloat(document.forms["myForm"]["numb2"].value);
            let operation = document.forms["myForm"]["operation"].value;
            let result;

            switch (operation) {
                case "add":
                    result = x + y;
                    break;
                case "sub":
                    result = x - y;
                    break;
                case "mul":
                    result = x * y;
                    break;
                case "div":
                    if (y === 0) {
                        result = "Cannot divide by zero";
                    } else {
                        result = x / y;
                    }
                    break;
                case "mod":
                    result = x % y;
                    break;
                default:
                    result = "Invalid operation";
            }

            document.getElementById('result').innerHTML = "Result: " + result;
        }
    </script>
    </script>
        
    </body>
    </html>
===========================================================================
Day 14: 06/02/25
Events
A JavaScript can be executed when an event occurs, like when a user clicks on an HTML element.
To execute code when a user clicks on an element, add JavaScript code to an HTML event attribute:
onclick=JavaScript

EX:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        div{
            height: 100px;
            width:100px;
            border:solid 5px red;

        }
    </style>
</head>
<body id="d1" onload="changebg()">
    <h2 onclick="this.innerHTML=new Date()">hello</h2>
    <div onmouseover="onover(this)" onmouseout="onout(this)">hi</div>
   <div onmousedown="Onpress(this)" onmouseup="onup(this)">welcome</div>
    <input type="text" id="i1" onchange="upercase()">
    
    <script>
        function onover(m)
        {
            m.innerHTML="hello";
        }
        function onout(m)
        {
            m.innerHTML="Thank You";
        }
function Onpress(n)
{
    n.innerHTML="pink";
    n.style.backgroundColor="green";
}
function onupercase(n)
{
    n.innerHTML="Hi";
}
 
function upercase(){
    var n=document.getElementById("i1");
    n.value=n.value.toUpperCase();
}
document.getElementById("d1").style.backgroundColor="grey";
    </script>
</body>
</html>

===========================================================================Day 15: 07/02/2025
The addEventListener() method
The addEventListener() method attaches an event handler to the specified element.
When using the addEventListener() method, the JavaScript is separated from the HTML markup, for better readability and allows you to add event listeners even when you do not control the HTML markup.
Syntax
element.addEventListener(event, function, useCapture);
The first parameter is the type of the event (like "click" or "mousedown" or any other HTML DOM Event.)
The second parameter is the function we want to call when the event occurs.
The third parameter is a boolean value specifying whether to use event bubbling or event capturing. This parameter is optional.

EX: 1
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h2>Javascript addEventLustener()</h2>

    <p>This example uses the addEventListener() method to attach a click event to a button.</p>

    <button id="mybtn">Try it</button>
    <p id="p1">Hello</p>
    <button id="b1">Date</button>

    <script>
        document.getElementById("mybtn").addEventListener("click",
            function(){
                alert("Hello World!");
        });
        var x=document.getElementById("p1");
        var y=document.getElementById("b1");
        y.addEventListener("click",myfun);
        function myfun(){
            x.innerHTML=Date();
        }
        
    </script>

</body>
</html>

EX:2 dom append
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h2>JavaScript HTML DOM</h2>
<p>Add a new HTML Element.</p>

    <div id="div1">
        <p id="p1">This is a paragraph</p>
        <p id="p2">This is a another paragraph</p></div>

    <script>
        const para =document.createElement("p");
        const node =document.createTextNode("This is new.");
        para.appendChild(node);
        const element = document.getElementById("div1");
        element.appendChild(para);
    </script>
</body>
</html>

EX:3 dominsertbefore
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h2>JavaScript HTML DOM</h2>
<p>Add a new HTML Element.</p>

<div id="div1">
    <p id="p1">This is a paragraph</p>
    <p id="p2">This is a another paragraph</p></div>

<script>
    const para =document.createElement("p");
    const node =document.createTextNode("This is new.");
    para.appendChild(node);

    const element = document.getElementById("div1");
    const child = document.getElementById("p1");
    element.insertBefore(para,child);
    </script>
</body>
</html>

EX:3 domremove
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h2>JavaScript HTML DOM</h2>
    <p>Add a new HTML Element.</p>
    
    <div id="div1">
        <p id="p1">This is a paragraph</p>
        <p id="p2">This is a another paragraph</p></div>

    <button onclick="myFunction()">Remove Element
        
        <script>
            function myFunction(){
                document.getElementById("p1").remove();
            }
        </script>
</body>
</html>

EX: dommodels
<html>
    <head>
<style>
    div{
        border: 5px solid brown;
        height: 300px;
        width: 400px;
    }
</style>
    </head>
    <body>
        <p id="p1">hi</p>
        <button onclick="fun2()">Change color</button>
        <p class="c1"> hello</p>
        <p class="c1">welcome </p>
        <p class="c1">goodday </p>
        <p>Have a nice day</p>
        <img src="Tv.jpg" id="img1">
        <button id="b1">Click Me!!</button>
        <script>
            document.getElementById("p1").innerText="IIHT";
            var  w = document.getElementsByClassName("c1");
            w[0].innerHTML="HTML1";
            w[1].innerHTML="HTML2";
            w[2].innerHTML="HTML3";
        var x = document.getElementsByTagName("p");
        x[4].innerHTML="Paragraph by tagname";
    function fun1(){
        document.getElementById("img1").src="images.png";
    }
    function fun12(){
        document.getElementById("img1").src="Tv.jpg";
    }
document.getElementById("img1").src="images.png";
let btn=document.getElementById("b1");
btn.addEventListener("click",fun1);
btn.addEventListener("dblclick",fun12);

       
        function fun2()
        {
        document.getElementById("p1").style.color="blue";
        document.getElementById("p1").style.backgroundColor="pink";
        }
        function change()
        {
            document.getElementById("d1").style.backgroundColor="lightgreen";
        }
        
        </script>
        <div id="d1"> Hello </div>
        <button onclick="change()">click here</button>
    </body>
</html>
===========================================================================
Day 15:


